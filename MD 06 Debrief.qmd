---
title: "MD 06 Debrief"
author: "Logan Agin"
format: html
editor: visual
embed-resources: true
---

```{r}
#| message: false

library(tidyverse)

library(moderndive)

theme_set(theme_light())
```

## USE THIS TO FIGURE OUT PREDICTIONS IMPORTANT

```{r}
gender_employment <- read_csv("https://raw.githubusercontent.com/vaiseys/dav-course/main/Data/gender_employment.csv")

gender_employment <- gender_employment %>% 

  mutate(major_category = as.factor(major_category), 

         major_category = relevel(major_category, ref = "Management, Business, and Financial"))
```

\# Read in the data

\`\`\`

```{r}
ptmodel <- lm(wage_percent_of_male ~ year + major_category,

              data = gender_employment)

intmodel <- lm(wage_percent_of_male ~ year * major_category,

              data = gender_employment)
broom::tidy(ptmodel)
broom::tidy(intmodel)
```

\`\`\`

Let's look at the tables. First, the parallel trends.

```{r}
ptmodel |> 

  get_regression_table() |> 

  select(term, estimate)    # just keep what I need
```

\`\`\`

Second, the interaction model.

```{r}
intmodel |> 

  get_regression_table() |> 

  select(term, estimate)    # just keep what I need
```

\`\`\`

What's the best way to get predictions? Not by hand! I wanted you to do that for understanding but here's a better way.

```{r}
pred_df <- tribble(         # tribble allows easy manual data entry

  ~year, ~major_category, #this allows you to not do the equation by hand

  2016, "Service"       # the 2016 can be whatever year, it will predict that year

)

pred_df
```

\`\`\`

You can get predictions on this "new" dataset.

```{r}
predict(ptmodel,

        newdata = pred_df)
```

\`\`\`

Better yet, you can add the predictions to the data frame.

```{r}
pred_df <- pred_df |> 

  mutate(pt_pred = predict(ptmodel, newdata = pred_df),  
         #pt_pred can be whatever name you want, same with int_pred

         int_pred = predict(intmodel, newdata = pred_df))

pred_df
# this will allow you to make correct predictions instead of equation 
```

\`\`\`

You can create more complicated prediction data frames, too.

```{r}
pred_df2 <- 

  expand_grid(

    major_category = c("Service", "Sales and Office"),

    year = c(2013, 2016)

  )

pred_df2
#takes 2 different major categories and 2 different years and makes a table ready for predictions 
#2013:2016 allows for all years inbetween 2013 and 2016, 2013,2014,2015,2016
```

\`\`\`

Then you get the same procedure

```{r}
pred_df2 <- pred_df2 |> 

  mutate(pt_pred = predict(ptmodel, newdata = pred_df2),

         int_pred = predict(intmodel, newdata = pred_df2))

pred_df2
```

\`\`\`

Then you could plot.

```{r}
ggplot(pred_df2,

       aes(x = major_category,

           y = int_pred,

           group = factor(year),

           fill = factor(year))) +

  geom_col(position = "dodge")
```

## Functions to help with HW MD 06 Extra

intercept means what they think the wage gap between gender is at the start of year 0, but this does not make sense because the data starts at 2013. Here is a trick to help.

Start your year counter at a meaningful part. If data set runs from 2013-2016.

```{r}
gender_employment <- gender_employment %>% 
  mutate(year0 = year-2013)

ptmod2 <- lm(wage_percent_of_male ~ year0 +major_category,
             data = gender_employment)
get_regression_table(ptmod2)
```

This changes what we call year 0. year 0 = year 2013. This is for your understanding.
